generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  name              String?
  username          String?   @unique @db.VarChar(50) // Add this
  fullName          String?   @db.VarChar(100) // Add this
  email             String?   @unique @db.VarChar(255)
  password          String?
  payments          Payment[]
  role              UserRole  @default(USER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  emailVerified     Boolean   @default(false)
  phoneNumber       String?   @unique @db.VarChar(20)
  phoneVerified     Boolean   @default(false)
  isProfileComplete Boolean   @default(false)
  isActive          Boolean   @default(true)
  resetToken        String?   @db.VarChar(255)
  dob               DateTime? // Optional date of birth

  // Add these new profile fields
  country String? @db.VarChar(100) // Add this
  state   String? @db.VarChar(100) // Add this
  zip     String? @db.VarChar(20) // Add this

  pendingEmail        String?
  pendingEmailOtp     String?
  pendingEmailExpiry  DateTime?
  resetTokenExpiry    DateTime?
  pendingDeleteOtp    String?
  pendingDeleteExpiry DateTime?

  // Relations
  accounts          Account[]
  cartItems         CartItem[]
  emailOtps         EmailOTP[]
  emailTokens       EmailVerificationToken[]
  orders            Order[]
  phoneOtps         PhoneOTP[]
  sessions          Session[]
  wishlist          Wishlist[]
  addresses         Address[]
  savedCards        SavedCard[]
  savedUpis         SavedUpi[]
  reviews           Review[]
  // Relations for coupon assignments
  couponAssignments CouponAssignment[]

  @@index([email])
  @@index([phoneNumber])
  @@index([username]) // Add this index
  @@index([role])
  @@index([isActive])
  @@index([phoneVerified, isProfileComplete])
  @@index([emailVerified, isProfileComplete])
  @@index([resetToken])
  @@map("users")
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(255)
  description   String
  price         Float
  image         String[]
  // category    String   @db.VarChar(100)    // REMOVE THIS
  // subCategory String   @db.VarChar(100)    // REMOVE THIS
  categoryId    Int // ADD THIS
  subcategoryId Int // ADD THIS
  sizes         String[]
  bestseller    Boolean? @default(false)
  isActive      Boolean  @default(true)
  stock         Int      @default(0)
  date          BigInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Denormalized review aggregates
  averageRating Float?   @default(0)
  reviewsCount  Int      @default(0)

  // Relations
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishlist    Wishlist[]
  reviews     Review[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([bestseller])
  @@index([isActive])
  @@map("products")
}

// Reviews: unified for product and delivery reviews
model Review {
  id              String     @id @default(cuid())
  intId           Int?       @unique
  userId          Int
  type            ReviewType
  productId       Int?
  orderId         Int?
  // deliveryAgentId removed — delivery agent reviews are not tracked in schema
  rating          Int
  title           String?    @db.VarChar(100)
  comment         String?    @db.VarChar(2000)
  images          String[]   @default([])
  metadata        Json?
  isEdited        Boolean    @default(false)
  isDeleted       Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])
  order   Order?   @relation(fields: [orderId], references: [id])

  @@unique([userId, productId, type], name: "unique_product_review")
  @@unique([userId, orderId, type], name: "unique_delivery_review")
  @@index([type, productId])
  @@index([type, orderId])
  @@index([userId, type])
  @@index([productId])
  @@index([orderId])
  // @@index([deliveryAgentId]) removed
  @@map("reviews")
}

model OfferRule {
  id            Int      @id @default(autoincrement())
  offerId       Int
  priceBelow    Decimal?
  priceAbove    Decimal?
  minDiscount   Int?
  maxDiscount   Int?
  ageGroupStart Int?
  ageGroupEnd   Int?
  tags          String[] @default([])
  subcategoryId Int?

  offer       Offer        @relation(fields: [offerId], references: [id], onDelete: Cascade)
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("offer_rules")
}

enum ReviewType {
  PRODUCT
  DELIVERY
}

// New Wishlist model
model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Composite unique constraint to prevent duplicates
  @@unique([userId, productId], name: "userId_productId")
  @@index([userId])
  @@index([productId])
  @@index([createdAt])
  @@map("wishlist")
}

// Rest of your existing models remain unchanged...

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  provider          String   @db.VarChar(50)
  providerAccountId String   @db.VarChar(255)
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  tokenType         String?  @db.VarChar(50)
  scope             String?  @db.VarChar(255)
  idToken           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@map("accounts")
}

model Session {
  createdAt    DateTime @default(now())
  expires      DateTime
  sessionToken String   @unique @db.VarChar(255)
  updatedAt    DateTime @updatedAt
  userId       Int
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model PhoneOTP {
  id          Int      @id @default(autoincrement())
  otp         String   @db.VarChar(6)
  userId      Int
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  attempts    Int      @default(0)
  ipAddress   String?  @db.VarChar(45)
  isUsed      Boolean  @default(false)
  type        OTPType  @default(SIGNIN)
  userAgent   String?
  maxAttempts Int      @default(3)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, createdAt])
  @@index([otp, isUsed, expiresAt])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("phone_otps")
}

model EmailOTP {
  id          Int      @id @default(autoincrement())
  userId      Int
  otp         String   @db.VarChar(6)
  expiresAt   DateTime
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  ipAddress   String?  @db.VarChar(45)
  isUsed      Boolean  @default(false)
  maxAttempts Int      @default(3)
  type        OTPType  @default(EMAIL_VERIFICATION)
  userAgent   String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([otp, isUsed, expiresAt])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("email_otps")
}

model EmailVerificationToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  usedAt    DateTime? // ← This is at the end, but your code expects it

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  size      String   @db.VarChar(10)
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Order {
  id             Int         @id @default(autoincrement())
  userId         Int
  amount         Float
  address        Json
  status         OrderStatus @default(ORDER_PLACED)
  paymentMethod  String      @db.VarChar(50)
  payment        Boolean     @default(false)
  paymentId      String?     @db.VarChar(255)
  date           BigInt
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  items          OrderItem[]
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade) // ← Add this
  paymentDetails Payment?
  reviews        Review[]

  @@index([userId])
  @@index([status])
  @@index([payment])
  @@index([createdAt])
  @@map("orders")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  size      String   @db.VarChar(10)
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, size])
  @@index([userId])
  @@index([productId])
  @@map("cart_items")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// (previous simple Coupon model removed to use enhanced Coupon model appended below)

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  ORDER_PLACED
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OTPType {
  SIGNIN
  SIGNUP
  PASSWORD_RESET
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  EMAIL_CHANGE
  PHONE_CHANGE
  ACCOUNT_DELETE
}

model Address {
  id           Int      @id @default(autoincrement())
  userId       Int
  name         String // The name of the recipient, e.g., "John Doe"
  street       String
  city         String
  state        String
  zip          String
  country      String
  phone        String
  instructions String? // Optional delivery instructions
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Establish the relationship with the User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isDefault])
  @@map("addresses")
}

model SavedCard {
  id                  Int      @id @default(autoincrement())
  userId              Int
  cardholderName      String
  last4               String   @db.VarChar(4)
  brand               String // e.g., "visa", "mastercard"
  expiryMonth         Int
  expiryYear          Int
  paymentGatewayToken String   @unique // IMPORTANT: Secure token from your payment provider (e.g., Stripe, Razorpay)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relation to the User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_cards")
}

model SavedUpi {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String // Name associated with the UPI
  vpa       String   @unique // Virtual Payment Address, e.g., "username@okhdfcbank"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to the User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_upis")
}

model Payment {
  id                String        @id @default(cuid())
  razorpayPaymentId String?       @unique // Razorpay payment_id
  razorpayOrderId   String        @unique // Razorpay order_id  
  razorpaySignature String? // Payment verification signature
  amount            Int // Amount in paise (100 paise = 1 INR)
  currency          String        @default("INR")
  status            PaymentStatus @default(PENDING)
  method            String?       @db.VarChar(50) // card, netbanking, wallet, upi
  gateway           String        @default("RAZORPAY") @db.VarChar(50)
  gatewayResponse   Json? // Store full gateway response for debugging
  failureReason     String?       @db.VarChar(500)
  orderId           Int           @unique // Links to your existing Order
  userId            Int // <- ADD THIS FIELD
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade) // <- ADD THIS

  @@unique([userId, razorpayOrderId], name: "userId_razorpayOrderId")
  @@index([razorpayOrderId])
  @@index([razorpayPaymentId])
  @@index([status])
  @@index([userId]) // <- ADD THIS INDEX
  @@index([createdAt])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?
  imageUrl    String? // Optional: for category images
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subcategories Subcategory[]
  offers        Offer[]
  products      Product[]

  @@index([isActive])
  @@map("categories")
}

model Subcategory {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  grouping   String   @db.VarChar(100) // For "Topwear", "Bottomwear", etc.
  categoryId Int
  imageUrl   String? // optional image/icon for subcategory
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products   Product[]
  // Offer rules that target this subcategory
  offerRules OfferRule[]

  @@unique([name, categoryId]) // A subcategory name should be unique within a category
  @@index([grouping])
  @@index([categoryId])
  @@map("subcategories")
}

model Offer {
  id              Int      @id @default(autoincrement())
  title           String   @db.VarChar(255)
  description     String
  discountPercent Float
  iconUrl         String?
  isActive        Boolean  @default(true)
  startDate       DateTime
  endDate         DateTime
  categoryId      Int
  offerTypeId     Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  offerType  OfferType?  @relation(fields: [offerTypeId], references: [id])
  // Offer rules for this offer
  offerRules OfferRule[]

  @@index([categoryId])
  @@index([isActive, startDate, endDate])
  @@map("offers")
}

// New model for Offer Types (categorization of offers, can have icon/image)
model OfferType {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?
  iconUrl     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  offers Offer[]

  @@map("offer_types")
}

model Coupon {
  id                Int                @id @default(autoincrement())
  code              String             @unique @db.VarChar(50)
  name              String
  type              CouponType
  discountValue     Decimal
  minOrderValue     Decimal?
  maxDiscountAmount Decimal?
  usageLimitTotal   Int?
  usageLimitPerUser Int?
  validFrom         DateTime
  validUntil        DateTime
  isActive          Boolean            @default(true)
  isNewUserOnly     Boolean            @default(false)
  categoryIds       Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  usages            CouponUsage[]
  orderCoupons      OrderCoupon[]
  // Optional assignments to specific users. If empty/null -> global coupon
  assignments       CouponAssignment[]

  @@map("coupons")
}

model CouponUsage {
  id       Int      @id @default(autoincrement())
  couponId Int
  userId   Int
  orderId  Int?
  usedAt   DateTime @default(now())
  coupon   Coupon   @relation(fields: [couponId], references: [id])

  @@map("coupon_usages")
}

model OrderCoupon {
  id            Int      @id @default(autoincrement())
  orderId       Int
  couponId      Int
  discountValue Decimal
  createdAt     DateTime @default(now())
  coupon        Coupon   @relation(fields: [couponId], references: [id])

  @@map("order_coupons")
}

model CouponAssignment {
  id       Int @id @default(autoincrement())
  couponId Int
  userId   Int

  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([couponId, userId], name: "coupon_user_unique")
  @@index([userId])
  @@map("coupon_assignments")
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}
