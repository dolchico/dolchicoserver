generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                      @id @default(autoincrement())
  name              String?                  
  email             String?                  @unique @db.VarChar(255)
  password          String?
  role              UserRole                 @default(USER)
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  emailVerified     Boolean                  @default(false)
  phoneNumber       String?                  @unique @db.VarChar(20)
  phoneVerified     Boolean                  @default(false)
  isProfileComplete Boolean                  @default(false)
  isActive          Boolean                  @default(true)
  resetToken        String?                  @db.VarChar(255)
  pendingEmail       String?
  pendingEmailOtp    String?
  pendingEmailExpiry DateTime?
  resetTokenExpiry  DateTime?
  pendingDeleteOtp     String?
  pendingDeleteExpiry  DateTime?
  
  // Relations
  accounts          Account[]
  cartItems         CartItem[]
  emailOtps         EmailOTP[]
  emailTokens       EmailVerificationToken[]
  orders            Order[]
  phoneOtps         PhoneOTP[]
  sessions          Session[]
  wishlist          Wishlist[]               // Added wishlist relation

  @@index([email])
  @@index([phoneNumber])
  @@index([role])
  @@index([isActive])
  @@index([phoneVerified, isProfileComplete])
  @@index([emailVerified, isProfileComplete])
  @@index([resetToken])
  @@map("users")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String
  price       Float
  image       String[]
  category    String      @db.VarChar(100)
  subCategory String      @db.VarChar(100)
  sizes       String[]
  bestseller  Boolean?    @default(false)
  isActive    Boolean     @default(true)
  stock       Int         @default(0)
  date        BigInt
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishlist    Wishlist[]                   // Added wishlist relation

  @@index([category])
  @@index([subCategory])
  @@index([bestseller])
  @@index([isActive])
  @@map("products")
}

// New Wishlist model
model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Composite unique constraint to prevent duplicates
  @@unique([userId, productId], name: "userId_productId")
  @@index([userId])
  @@index([productId])
  @@index([createdAt])
  @@map("wishlist")
}

// Rest of your existing models remain unchanged...

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  provider          String   @db.VarChar(50)
  providerAccountId String   @db.VarChar(255)
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  tokenType         String?  @db.VarChar(50)
  scope             String?  @db.VarChar(255)
  idToken           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@map("accounts")
}

model Session {
  createdAt    DateTime @default(now())
  expires      DateTime
  sessionToken String   @unique @db.VarChar(255)
  updatedAt    DateTime @updatedAt
  userId       Int
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model PhoneOTP {
  id          Int      @id @default(autoincrement())
  otp         String   @db.VarChar(6)
  userId      Int
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  attempts    Int      @default(0)
  ipAddress   String?  @db.VarChar(45)
  isUsed      Boolean  @default(false)
  type        OTPType  @default(SIGNIN)
  userAgent   String?
  maxAttempts Int      @default(3)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, createdAt])
  @@index([otp, isUsed, expiresAt])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("phone_otps")
}

model EmailOTP {
  id          Int      @id @default(autoincrement())
  userId      Int
  otp         String   @db.VarChar(6)
  expiresAt   DateTime
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  ipAddress   String?  @db.VarChar(45)
  isUsed      Boolean  @default(false)
  maxAttempts Int      @default(3)
  type        OTPType  @default(EMAIL_VERIFICATION)
  userAgent   String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([otp, isUsed, expiresAt])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("email_otps")
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  size      String   @db.VarChar(10)
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  amount        Float
  address       Json
  status        OrderStatus @default(ORDER_PLACED)
  paymentMethod String      @db.VarChar(50)
  payment       Boolean     @default(false)
  paymentId     String?     @db.VarChar(255)
  date          BigInt
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         OrderItem[]
  user          User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([payment])
  @@index([createdAt])
  @@map("orders")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  size      String   @db.VarChar(10)
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, size])
  @@index([userId])
  @@index([productId])
  @@map("cart_items")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@map("categories")
}

model Coupon {
  id         Int       @id @default(autoincrement())
  code       String    @unique @db.VarChar(50)
  discount   Float
  isActive   Boolean   @default(true)
  expiresAt  DateTime?
  usageLimit Int?
  usageCount Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([code])
  @@index([isActive])
  @@index([expiresAt])
  @@map("coupons")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  ORDER_PLACED
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OTPType {
  SIGNIN
  SIGNUP
  PASSWORD_RESET
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  EMAIL_CHANGE
  ACCOUNT_DELETE

}
