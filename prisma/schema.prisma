generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                      @id @default(autoincrement())
  name              String?                  
  username          String?                  @unique @db.VarChar(50)  // Add this
  fullName          String?                  @db.VarChar(100)        // Add this
  email             String?                  @unique @db.VarChar(255)
  password          String?
  payments          Payment[] 
  role              UserRole                 @default(USER)
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  emailVerified     Boolean                  @default(false)
  phoneNumber       String?                  @unique @db.VarChar(20)
  phoneVerified     Boolean                  @default(false)
  isProfileComplete Boolean                  @default(false)
  isActive          Boolean                  @default(true)
  resetToken        String?                  @db.VarChar(255)
  dob               DateTime?                // Optional date of birth
  
  // Add these new profile fields
  country           String?                  @db.VarChar(100)        // Add this
  state             String?                  @db.VarChar(100)        // Add this
  zip               String?                  @db.VarChar(20)         // Add this
  
  pendingEmail       String?
  pendingEmailOtp    String?
  pendingEmailExpiry DateTime?
  resetTokenExpiry  DateTime?
  pendingDeleteOtp     String?
  pendingDeleteExpiry  DateTime?
  
  // Relations
  accounts          Account[]
  cartItems         CartItem[]
  emailOtps         EmailOTP[]
  emailTokens       EmailVerificationToken[]
  orders            Order[]
  phoneOtps         PhoneOTP[]
  sessions          Session[]
  wishlist          Wishlist[]  
  addresses         Address[]
  savedCards        SavedCard[] 
  savedUpis         SavedUpi[]  

  @@index([email])
  @@index([phoneNumber])
  @@index([username])                        // Add this index
  @@index([role])
  @@index([isActive])
  @@index([phoneVerified, isProfileComplete])
  @@index([emailVerified, isProfileComplete])
  @@index([resetToken])
  @@map("users")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String
  price       Float
  image       String[]
  // category    String   @db.VarChar(100)    // REMOVE THIS
  // subCategory String   @db.VarChar(100)    // REMOVE THIS
  categoryId  Int                           // ADD THIS
  subcategoryId Int                         // ADD THIS
  sizes       String[]
  bestseller  Boolean? @default(false)
  isActive    Boolean  @default(true)
  stock       Int      @default(0)
  date        BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category    @relation(fields: [categoryId], references: [id])
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishlist    Wishlist[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([bestseller])
  @@index([isActive])
  @@map("products")
}

// New Wishlist model
model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Composite unique constraint to prevent duplicates
  @@unique([userId, productId], name: "userId_productId")
  @@index([userId])
  @@index([productId])
  @@index([createdAt])
  @@map("wishlist")
}

// Rest of your existing models remain unchanged...

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  provider          String   @db.VarChar(50)
  providerAccountId String   @db.VarChar(255)
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  tokenType         String?  @db.VarChar(50)
  scope             String?  @db.VarChar(255)
  idToken           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@map("accounts")
}

model Session {
  createdAt    DateTime @default(now())
  expires      DateTime
  sessionToken String   @unique @db.VarChar(255)
  updatedAt    DateTime @updatedAt
  userId       Int
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model PhoneOTP {
  id          Int      @id @default(autoincrement())
  otp         String   @db.VarChar(6)
  userId      Int
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  attempts    Int      @default(0)
  ipAddress   String?  @db.VarChar(45)
  isUsed      Boolean  @default(false)
  type        OTPType  @default(SIGNIN)
  userAgent   String?
  maxAttempts Int      @default(3)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, createdAt])
  @@index([otp, isUsed, expiresAt])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("phone_otps")
}

model EmailOTP {
  id          Int      @id @default(autoincrement())
  userId      Int
  otp         String   @db.VarChar(6)
  expiresAt   DateTime
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  ipAddress   String?  @db.VarChar(45)
  isUsed      Boolean  @default(false)
  maxAttempts Int      @default(3)
  type        OTPType  @default(EMAIL_VERIFICATION)
  userAgent   String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([otp, isUsed, expiresAt])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("email_otps")
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  usedAt    DateTime?  // ← This is at the end, but your code expects it
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  size      String   @db.VarChar(10)
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  amount        Float
  address       Json
  status        OrderStatus @default(ORDER_PLACED)
  paymentMethod String      @db.VarChar(50)
  payment       Boolean     @default(false)
  paymentId     String?     @db.VarChar(255)
  date          BigInt
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         OrderItem[]
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade) // ← Add this
  paymentDetails       Payment?
  @@index([userId])
  @@index([status])
  @@index([payment])
  @@index([createdAt])
  @@map("orders")
}


model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  size      String   @db.VarChar(10)
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, size])
  @@index([userId])
  @@index([productId])
  @@map("cart_items")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Coupon {
  id         Int       @id @default(autoincrement())
  code       String    @unique @db.VarChar(50)
  discount   Float
  isActive   Boolean   @default(true)
  expiresAt  DateTime?
  usageLimit Int?
  usageCount Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([code])
  @@index([isActive])
  @@index([expiresAt])
  @@map("coupons")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  ORDER_PLACED
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OTPType {
  SIGNIN
  SIGNUP
  PASSWORD_RESET
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  EMAIL_CHANGE
  PHONE_CHANGE
  ACCOUNT_DELETE

}

enum TicketCategory {
  refund
  replacement
  mixed
  general
}

enum TicketStatus {
  open
  in_progress
  closed
}

enum TicketResolutionStatus {
  resolved
  unresolved
}

enum TicketProductAction {
  Refund
  Replacement
}

model Ticket {
  id               String                  @id @default(cuid())
  ticketId         String                  @unique
  fullName         String
  email            String
  subject          String
  message          String
  userId           Int?
  orderId          Int?
  category         TicketCategory
  status           TicketStatus
  resolutionStatus TicketResolutionStatus
  priority         String
  estimatedResponse String
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  products         TicketProduct[]

  @@map("tickets")
}

model TicketProduct {
  id         String             @id @default(cuid())
  ticketId   String
  ticket     Ticket             @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  productId  Int
  productName String
  action     TicketProductAction
  createdAt  DateTime           @default(now())

  @@index([ticketId])
  @@map("ticket_products")
}

model Address {
  id           Int      @id @default(autoincrement())
  userId       Int
  name         String   // The name of the recipient, e.g., "John Doe"
  street       String
  city         String
  state        String
  zip          String
  country      String
  phone        String
  instructions String?  // Optional delivery instructions
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Establish the relationship with the User model
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isDefault])
  @@map("addresses")
}

model SavedCard {
  id                  Int      @id @default(autoincrement())
  userId              Int
  cardholderName      String
  last4               String   @db.VarChar(4)
  brand               String   // e.g., "visa", "mastercard"
  expiryMonth         Int
  expiryYear          Int
  paymentGatewayToken String   @unique // IMPORTANT: Secure token from your payment provider (e.g., Stripe, Razorpay)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relation to the User model
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_cards")
}

model SavedUpi {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String   // Name associated with the UPI
  vpa       String   @unique // Virtual Payment Address, e.g., "username@okhdfcbank"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to the User model
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_upis")
}

model Payment {
  id                String        @id @default(cuid())
  razorpayPaymentId String?       @unique // Razorpay payment_id
  razorpayOrderId   String        @unique // Razorpay order_id  
  razorpaySignature String?       // Payment verification signature
  amount            Int           // Amount in paise (100 paise = 1 INR)
  currency          String        @default("INR")
  status            PaymentStatus @default(PENDING)
  method            String?       @db.VarChar(50) // card, netbanking, wallet, upi
  gateway           String        @default("RAZORPAY") @db.VarChar(50)
  gatewayResponse   Json?         // Store full gateway response for debugging
  failureReason     String?       @db.VarChar(500)
  orderId           Int           @unique // Links to your existing Order
  userId            Int           // <- ADD THIS FIELD
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  order             Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade) // <- ADD THIS

  @@index([razorpayOrderId])
  @@index([razorpayPaymentId])
  @@index([status])
  @@index([userId])       // <- ADD THIS INDEX
  @@index([createdAt])
  @@unique([userId, razorpayOrderId], name: "userId_razorpayOrderId")
  @@map("payments")
}


enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
}

model Category {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(100)
  description   String?
  imageUrl      String?  // Optional: for category images
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  subcategories Subcategory[]
  offers        Offer[]
  products      Product[]

  @@index([isActive])
  @@map("categories")
}

model Subcategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  grouping    String   @db.VarChar(100) // For "Topwear", "Bottomwear", etc.
  categoryId  Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products    Product[]

  @@unique([name, categoryId]) // A subcategory name should be unique within a category
  @@index([grouping])
  @@index([categoryId])
  @@map("subcategories")
}

model Offer {
  id              Int       @id @default(autoincrement())
  title           String    @db.VarChar(255)
  description     String
  discountPercent Float
  isActive        Boolean   @default(true)
  startDate       DateTime
  endDate         DateTime
  categoryId      Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  category        Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([isActive, startDate, endDate])
  @@map("offers")
}