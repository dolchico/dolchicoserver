generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String?
  username String? @unique @db.VarChar(50)
  fullName String? @db.VarChar(100)
  email String? @unique @db.VarChar(255)
  password String?
  payments Payment[]
  role UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  emailVerified Boolean @default(false)
  phoneNumber String? @unique @db.VarChar(20)
  phoneVerified Boolean @default(false)
  isProfileComplete Boolean @default(false)
  isActive Boolean @default(true)
 
  // New blocking fields
  isBlocked Boolean @default(false)
  blockedAt DateTime?
  blockedReason String?
  blockedBy String? // e.g., admin user ID who blocked
  blockedUntil DateTime?
  resetToken String? @db.VarChar(255)
  dob DateTime?
  country String? @db.VarChar(100)
  state String? @db.VarChar(100)
  zip String? @db.VarChar(20)
  pendingEmail String?
  pendingEmailOtp String?
  pendingEmailExpiry DateTime?
  resetTokenExpiry DateTime?
  pendingDeleteOtp String?
  pendingDeleteExpiry DateTime?
  accounts Account[]
  cartItems CartItem[]
  emailOtps EmailOTP[]
  emailTokens EmailVerificationToken[]
  orders Order[]
  phoneOtps PhoneOTP[]
  sessions Session[]
  wishlist Wishlist[]
  addresses Address[]
  savedCards SavedCard[]
  savedUpis SavedUpi[]
  reviews Review[]
  couponAssignments CouponAssignment[]
  couponUsages CouponUsage[] // Added to complete the relation
  tickets Ticket[]
  @@index([email])
  @@index([phoneNumber])
  @@index([username])
  @@index([role])
  @@index([isActive])
  @@index([isBlocked]) // New index for blocking queries
  @@index([blockedAt]) // New index for blocked date queries
  @@index([phoneVerified, isProfileComplete])
  @@index([emailVerified, isProfileComplete])
  @@index([resetToken])
  @@map("users")
}

model Product {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  description String
  price Decimal
  discountedPrice Decimal?
  discountPercent Int?
  ageGroupStart Int?
  ageGroupEnd Int?
  brand String? @db.VarChar(100)
  color String[]
  image String[]
  categoryId Int
  subcategoryId Int
  sizes String[]
  bestseller Boolean? @default(false)
  isActive Boolean @default(true)
  stock Int @default(0)
  date BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  averageRating Float? @default(0)
  reviewsCount Int @default(0)
  sku String @unique @db.VarChar(50)
  weight Decimal? @db.Decimal(8,3)
  dimensions Json?
  tags String[] @default([])
  seoSlug String? @unique @db.VarChar(255)
  compareAtPrice Decimal?
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  orderItems OrderItem[]
  wishlist Wishlist[]
  reviews Review[]
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([bestseller])
  @@index([isActive])
  @@index([sku])
  @@index([seoSlug])
  @@index([tags])
  @@map("products")
}

model Review {
  id String @id @default(cuid())
  userId String
  type ReviewType
  productId Int?
  orderId Int?
  rating Int
  title String? @db.VarChar(100)
  comment String? @db.VarChar(2000)
  images String[] @default([])
  metadata Json?
  isEdited Boolean @default(false)
  isDeleted Boolean @default(false)
  // New fields for admin management
  status ReviewStatus @default(PENDING)
  adminResponse String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])
  @@unique([userId, productId, type], name: "unique_product_review")
  @@unique([userId, orderId, type], name: "unique_delivery_review")
  @@index([type, productId])
  @@index([type, orderId])
  @@index([userId, type])
  @@index([productId])
  @@index([orderId])
  @@index([status]) // New index for status filtering
  @@map("reviews")
}

model OfferRule {
  id Int @id @default(autoincrement())
  offerId Int
  priceBelow Decimal?
  priceAbove Decimal?
  minDiscount Int?
  maxDiscount Int?
  ageGroupStart Int?
  ageGroupEnd Int?
  tags String[] @default([])
  subcategoryId Int?
  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("offer_rules")
}

enum ReviewType {
  PRODUCT
  DELIVERY
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model Wishlist {
  id Int @id @default(autoincrement())
  userId String
  productId Int
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@unique([userId, productId], name: "userId_productId")
  @@index([userId])
  @@index([productId])
  @@index([createdAt])
  @@map("wishlist")
}

model Account {
  id Int @id @default(autoincrement())
  userId String
  provider String @db.VarChar(50)
  providerAccountId String @db.VarChar(255)
  accessToken String?
  refreshToken String?
  expiresAt Int?
  tokenType String? @db.VarChar(50)
  scope String? @db.VarChar(255)
  idToken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@map("accounts")
}

model Session {
  createdAt DateTime @default(now())
  expires DateTime
  sessionToken String @unique @db.VarChar(255)
  updatedAt DateTime @updatedAt
  userId String
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model PhoneOTP {
  id Int @id @default(autoincrement())
  otp String @db.VarChar(6)
  userId String
  expiresAt DateTime
  createdAt DateTime @default(now())
  attempts Int @default(0)
  ipAddress String? @db.VarChar(45)
  isUsed Boolean @default(false)
  type OTPType @default(SIGNIN)
  userAgent String?
  maxAttempts Int @default(3)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, type, createdAt])
  @@index([otp, isUsed, expiresAt])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("phone_otps")
}

model EmailOTP {
  id Int @id @default(autoincrement())
  userId String
  otp String @db.VarChar(6)
  expiresAt DateTime
  attempts Int @default(0)
  createdAt DateTime @default(now())
  ipAddress String? @db.VarChar(45)
  isUsed Boolean @default(false)
  maxAttempts Int @default(3)
  type OTPType @default(EMAIL_VERIFICATION)
  userAgent String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, type])
  @@index([otp, isUsed, expiresAt])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("email_otps")
}

model EmailVerificationToken {
  id Int @id @default(autoincrement())
  token String @unique
  userId String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  usedAt DateTime?
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model OrderItem {
  id Int @id @default(autoincrement())
  orderId Int
  productId Int
  size String @db.VarChar(10)
  quantity Int
  price Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Order {
  id Int @id @default(autoincrement())
  userId String
  amount Decimal
  address Json
  status OrderStatus @default(ORDER_PLACED)
  paymentMethod String @db.VarChar(50)
  payment Boolean @default(false)
  paymentId String? @db.VarChar(255)
  date BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items OrderItem[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentDetails Payment?
  reviews Review[]
  tickets Ticket[]
  @@index([userId])
  @@index([status])
  @@index([payment])
  @@index([createdAt])
  @@map("orders")
}

model CartItem {
  id Int @id @default(autoincrement())
  userId String
  productId Int
  size String @db.VarChar(10)
  quantity Int
  price Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product @relation(fields: [productId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, productId, size])
  @@index([userId])
  @@index([productId])
  @@map("cart_items")
}

model VerificationToken {
  identifier String
  token String @unique
  expires DateTime
  createdAt DateTime @default(now())
  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  ORDER_PLACED
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OTPType {
  SIGNIN
  SIGNUP
  PASSWORD_RESET
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  EMAIL_CHANGE
  PHONE_CHANGE
  ACCOUNT_DELETE
}

model Address {
  id Int @id @default(autoincrement())
  userId String
  name String
  street String
  city String
  state String
  zip String
  country String
  phone String
  instructions String?
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([isDefault])
  @@map("addresses")
}

model SavedCard {
  id Int @id @default(autoincrement())
  userId String
  cardholderName String
  last4 String @db.VarChar(4)
  brand String
  expiryMonth Int
  expiryYear Int
  paymentGatewayToken String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@map("saved_cards")
}

model SavedUpi {
  id Int @id @default(autoincrement())
  userId String
  name String
  vpa String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@map("saved_upis")
}

model Payment {
  id String @id @default(cuid())
  razorpayPaymentId String? @unique
  razorpayOrderId String @unique
  razorpaySignature String?
  amount Int
  currency String @default("INR")
  status PaymentStatus @default(PENDING)
  method String? @db.VarChar(50)
  gateway String @default("RAZORPAY") @db.VarChar(50)
  gatewayResponse Json?
  failureReason String? @db.VarChar(500)
  orderId Int @unique
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, razorpayOrderId], name: "userId_razorpayOrderId")
  @@index([razorpayOrderId])
  @@index([razorpayPaymentId])
  @@index([status])
  @@index([userId])
  @@index([createdAt])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(100)
  description String?
  imageUrl String?
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subcategories Subcategory[]
  offers Offer[]
  products Product[]
  @@index([isActive])
  @@map("categories")
}

model Subcategory {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  grouping String @db.VarChar(100)
  categoryId Int
  imageUrl String?
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products Product[]
  offerRules OfferRule[]
  @@unique([name, categoryId])
  @@index([grouping])
  @@index([categoryId])
  @@map("subcategories")
}

model Offer {
  id Int @id @default(autoincrement())
  title String @db.VarChar(255)
  description String
  discountPercent Float
  iconUrl String?
  isActive Boolean @default(true)
  startDate DateTime
  endDate DateTime
  categoryId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  offerRules OfferRule[]
  @@index([categoryId])
  @@index([isActive, startDate, endDate])
  @@map("offers")
}

model Coupon {
  id Int @id @default(autoincrement())
  code String @unique @db.VarChar(50)
  name String
  type CouponType
  discountValue Decimal
  minOrderValue Decimal?
  maxDiscountAmount Decimal?
  usageLimitTotal Int?
  usageLimitPerUser Int?
  validFrom DateTime
  validUntil DateTime
  isActive Boolean @default(true)
  isNewUserOnly Boolean @default(false)
  categoryIds Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usages CouponUsage[]
  orderCoupons OrderCoupon[]
  assignments CouponAssignment[]
  @@map("coupons")
}

model CouponUsage {
  id Int @id @default(autoincrement())
  couponId Int
  userId String
  orderId Int?
  usedAt DateTime @default(now())
  coupon Coupon @relation(fields: [couponId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@map("coupon_usages")
}

model OrderCoupon {
  id Int @id @default(autoincrement())
  orderId Int
  couponId Int
  discountValue Decimal
  createdAt DateTime @default(now())
  coupon Coupon @relation(fields: [couponId], references: [id])
  @@map("order_coupons")
}

model CouponAssignment {
  id Int @id @default(autoincrement())
  couponId Int
  userId String
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([couponId, userId], name: "coupon_user_unique")
  @@index([userId])
  @@map("coupon_assignments")
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}

model Ticket {
  id String @id @default(cuid())
  ticketId String @default(cuid()) @unique @db.VarChar(50)
  userId String
  orderId Int?
  orderItemIds Int[]
  subject String @db.VarChar(255)
  message String?
  products Json?
  status TicketStatus @default(OPEN)
  resolvedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)
  @@index([userId])
  @@index([orderId])
  @@index([status])
  @@index([orderItemIds])
  @@map("tickets")
}

enum TicketStatus {
  OPEN
  RESOLVED
  CLOSED
}