// --- FILE: schema.prisma (Refactored for Production-Grade Cart) ---

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// ENUMS
// ================================

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  ORDER_PLACED
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

// ================================
// MODELS
// ================================

model User {
  id               Int      @id @default(autoincrement())
  name             String
  email            String   @unique @db.VarChar(255)
  password         String?
  role             UserRole @default(USER)
  // cartData         Json     @default("{}") // REFACTORED: REMOVED. This is an anti-pattern. The CartItem model is the single source of truth.
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?

  phoneNumber   String?  @unique @db.VarChar(20)
  emailVerified Boolean  @default(false)
  phoneVerified Boolean  @default(false)

  // Relations
  cartItems      CartItem[]
  orders         Order[]
  accounts       Account[]
  sessions       Session[]
  emailTokens    EmailVerificationToken[]
  phoneOtps      PhoneOTP[]

  @@index([email])
  @@index([role])
  @@map("users")
  @@index([phoneNumber])
}

// --- NO CHANGES TO THIS MODEL ---
model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  provider          String   @db.VarChar(50)
  providerAccountId String   @db.VarChar(255)
  accessToken       String?  @db.Text
  refreshToken      String?  @db.Text
  expiresAt         Int?
  tokenType         String?  @db.VarChar(50)
  scope             String?  @db.VarChar(255)
  idToken           String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@map("accounts")
}

// --- NO CHANGES TO THIS MODEL ---
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @db.VarChar(255)
  userId       Int
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

// --- NO CHANGES TO THIS MODEL ---
model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String   @db.Text
  price       Float
  image       String[]
  category    String   @db.VarChar(100)
  subCategory String   @db.VarChar(100)
  sizes       String[]
  bestseller  Boolean? @default(false)
  isActive    Boolean  @default(true)
  stock       Int      @default(0)
  date        BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItems CartItem[]

  @@index([category])
  @@index([subCategory])
  @@index([bestseller])
  @@index([isActive])
  @@map("products")
}

// --- NO CHANGES TO THIS MODEL ---
model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  amount        Float
  address       Json
  status        OrderStatus @default(ORDER_PLACED)
  paymentMethod String      @db.VarChar(50)
  payment       Boolean     @default(false)
  paymentId     String?     @db.VarChar(255)
  date          BigInt
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]

  @@index([userId])
  @@index([status])
  @@index([payment])
  @@index([createdAt])
  @@map("orders")
}

// --- THIS MODEL IS REFACTORED FOR CART LOGIC ---
model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  orderId   Int?
  size      String   @db.VarChar(10)
  quantity  Int
  price     Float    // REFACTORED: Changed to non-nullable. We will always store the price at the time of adding to cart.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade) // REFACTORED: Added onDelete: Cascade for automatic cleanup.
  product Product @relation(fields: [productId], references: [id])
  order   Order?  @relation(fields: [orderId], references: [id])

  // NEW: A database-level unique constraint is more robust than an application-level check.
  // This ensures a user cannot have two separate cart entries for the same product and size.
  @@unique([userId, productId, size])

  @@index([userId])
  @@index([productId])
  @@index([orderId])
  @@map("cart_items")
}

// --- ALL MODELS BELOW THIS LINE ARE UNCHANGED ---

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@map("categories")
}

model Coupon {
  id          Int       @id @default(autoincrement())
  code        String    @unique @db.VarChar(50)
  discount    Float
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  usageLimit  Int?
  usageCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([code])
  @@index([isActive])
  @@index([expiresAt])
  @@map("coupons")
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PhoneOTP {
  id        Int      @id @default(autoincrement())
  otp       String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

