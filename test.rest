##Below is the Test Cases for the SIGN IN SIGN UP

### Sign Up (Register)
POST http://localhost:4000/api/user/register
Content-Type: application/json

{
  "name": "John Doe 2",
  "email": "johndoe2@example.com",
  "password": "securePassword1234"
}

### Sign In (Login)
POST http://localhost:4000/api/user/login
Content-Type: application/json

{
  "email": "johndoe@example.com",
  "password": "securePassword123"
}



### Set global token variable (edit YOUR_JWT_TOKEN below)
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzUxMjcxOTA3LCJleHAiOjE3NTE4NzY3MDd9.fWN-mnwVA8HXd8fsYy2EZDmCP0kiB40Y4IfScL6MzXM

@baseUrl = http://localhost:4000/api/cart

### ✅ Get User Cart
GET {{baseUrl}}/get
Authorization: Bearer {{token}}

###

### ✅ Add to Cart
POST {{baseUrl}}/add
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "itemId": 1,
  "size": "M"
}

###

### ✅ Update Cart
POST {{baseUrl}}/update
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "itemId": 1,
  "size": "M",
  "quantity": 3
}


###Below is the test cases for Placing Order

/api/order/place         (user, needs auth header)
/api/order/userorders    (user, needs auth header)
/api/order/list          (admin, needs admin auth header)
/api/order/status        (admin, needs admin auth header)

### Place Order (User)
POST http://localhost:4000/api/order/place
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzUxMjcxOTA3LCJleHAiOjE3NTE4NzY3MDd9.fWN-mnwVA8HXd8fsYy2EZDmCP0kiB40Y4IfScL6MzXM


{
  "items": [
    { "productId": 1, "quantity": 2, "size": "M" },
    { "productId": 2, "quantity": 1, "size": "L" }
  ],
  "amount": 450.5,
  "address": {
    "street": "123 Main Street",
    "city": "City",
    "country": "Country"
  }
}


### Get User Orders
POST http://localhost:4000/api/order/userorders
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzUxMjcxOTA3LCJleHAiOjE3NTE4NzY3MDd9.fWN-mnwVA8HXd8fsYy2EZDmCP0kiB40Y4IfScL6MzXM


### Sign in as Admin

POST http://localhost:4000/api/admin/login
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "greatstack123"
}




### Get All Orders (Admin)
POST http://localhost:4000/api/order/list
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwiaWF0IjoxNzUxMzQ5NTk4LCJleHAiOjE3NTE5NTQzOTh9.jza-tLtOpnIXMviDTaNK1iW8ayH_75uKE82k6jInXWM


### Update Order Status (Admin)
POST http://localhost:4000/api/order/status
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwiaWF0IjoxNzUxMzQ5NTk4LCJleHAiOjE3NTE5NTQzOTh9.jza-tLtOpnIXMviDTaNK1iW8ayH_75uKE82k6jInXWM

{
  "orderId": 2,
  "status": "Delivered"
}


### Variables
@baseUrl = http://localhost:4000
@contentType = application/json

### ==============================================
### AUTHENTICATION - Login First
### ==============================================

### 1. Login User (Get JWT Token)
POST {{baseUrl}}/api/user/login
Content-Type: {{contentType}}

{
  "emailOrPhone": "akashthanda14@gmail.com",
  "password": "Ak@sh274648"
}

### Save the token from above response and replace YOUR_JWT_TOKEN_HERE
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTAsImlhdCI6MTc1NDIzOTQ2NywiZXhwIjoxNzU0ODQ0MjY3fQ.HVHt3dGMUD18zsOyHglv4OFbNKdSDWXCXgP8Z55pmzE

### 2. Alternative Login with Phone Number
POST {{baseUrl}}/api/user/login
Content-Type: {{contentType}}

{
  "phoneNumber": "+1234567890",
  "password": "password123"
}

### ==============================================
### BASIC WISHLIST OPERATIONS
### ==============================================

### 3. Get User's Wishlist (Initially Empty)
GET {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}

### 4. Get Wishlist Count (Should be 0 initially)
GET {{baseUrl}}/api/user/wishlist/count
Authorization: Bearer {{token}}

### 5. Add Product to Wishlist
POST {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productId": 1
}

### 6. Add Another Product to Wishlist
POST {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productId": 2
}

### 7. Add Third Product to Wishlist
POST {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productId": 3
}

### 8. Get Updated Wishlist (Should show 3 products)
GET {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}

### 9. Get Updated Wishlist Count (Should be 3)
GET {{baseUrl}}/api/user/wishlist/count
Authorization: Bearer {{token}}

### ==============================================
### WISHLIST CHECK OPERATIONS
### ==============================================

### 10. Check if Product 1 is in Wishlist (Should return true)
GET {{baseUrl}}/api/user/wishlist/check/1
Authorization: Bearer {{token}}

### 11. Check if Product 999 is in Wishlist (Should return false)
GET {{baseUrl}}/api/user/wishlist/check/999
Authorization: Bearer {{token}}

### 12. Check if Product 2 is in Wishlist (Should return true)
GET {{baseUrl}}/api/user/wishlist/check/2
Authorization: Bearer {{token}}

### ==============================================
### WISHLIST PAGINATION & FILTERING
### ==============================================

### 13. Get Wishlist with Pagination (Page 1, Limit 2)
GET {{baseUrl}}/api/user/wishlist?page=1&limit=2
Authorization: Bearer {{token}}

### 14. Get Wishlist with Pagination (Page 2, Limit 2)
GET {{baseUrl}}/api/user/wishlist?page=2&limit=2
Authorization: Bearer {{token}}

### 15. Get Wishlist Sorted by Name
GET {{baseUrl}}/api/user/wishlist?sort=name
Authorization: Bearer {{token}}

### 16. Get Wishlist Sorted by Price (Low to High)
GET {{baseUrl}}/api/user/wishlist?sort=price_low
Authorization: Bearer {{token}}

### 17. Get Wishlist Sorted by Price (High to Low)
GET {{baseUrl}}/api/user/wishlist?sort=price_high
Authorization: Bearer {{token}}

### 18. Get Wishlist Sorted by Newest First
GET {{baseUrl}}/api/user/wishlist?sort=newest
Authorization: Bearer {{token}}

### 19. Get Wishlist Filtered by Category (if you have Electronics category)
GET {{baseUrl}}/api/user/wishlist?category=Electronics
Authorization: Bearer {{token}}

### ==============================================
### WISHLIST SUMMARY
### ==============================================

### 20. Get Wishlist Summary
GET {{baseUrl}}/api/user/wishlist/summary
Authorization: Bearer {{token}}

### ==============================================
### BULK OPERATIONS
### ==============================================

### 21. Bulk Add Multiple Products to Wishlist
POST {{baseUrl}}/api/user/wishlist/bulk
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productIds": [4, 5, 6, 7, 8]
}

### 22. Get Wishlist After Bulk Add (Should show 8 products total)
GET {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}

### 23. Get Updated Count After Bulk Add
GET {{baseUrl}}/api/user/wishlist/count
Authorization: Bearer {{token}}

### 24. Get Updated Summary After Bulk Add
GET {{baseUrl}}/api/user/wishlist/summary
Authorization: Bearer {{token}}

### ==============================================
### DUPLICATE & ERROR TESTING
### ==============================================

### 25. Try to Add Same Product Again (Should Fail - Product 1)
POST {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productId": 1
}

### 26. Try to Bulk Add with Duplicates (Some should fail)
POST {{baseUrl}}/api/user/wishlist/bulk
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productIds": [1, 2, 9, 10]
}

### ==============================================
### REMOVE OPERATIONS
### ==============================================

### 27. Remove Product 1 from Wishlist
DELETE {{baseUrl}}/api/user/wishlist/1
Authorization: Bearer {{token}}

### 28. Verify Product 1 Removed
GET {{baseUrl}}/api/user/wishlist/check/1
Authorization: Bearer {{token}}

### 29. Get Wishlist After Removal
GET {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}

### 30. Remove Product 2 from Wishlist
DELETE {{baseUrl}}/api/user/wishlist/2
Authorization: Bearer {{token}}

### 31. Try to Remove Non-existent Product (Should Fail)
DELETE {{baseUrl}}/api/user/wishlist/999
Authorization: Bearer {{token}}

### 32. Try to Remove Already Removed Product (Should Fail)
DELETE {{baseUrl}}/api/user/wishlist/1
Authorization: Bearer {{token}}

### ==============================================
### VALIDATION ERROR TESTING
### ==============================================

### 33. Try to Add Product Without Token (Should Fail)
POST {{baseUrl}}/api/user/wishlist
Content-Type: {{contentType}}

{
  "productId": 1
}

### 34. Try to Add Product with Invalid Token (Should Fail)
POST {{baseUrl}}/api/user/wishlist
Authorization: Bearer invalid_token_here
Content-Type: {{contentType}}

{
  "productId": 1
}

### 35. Try to Add Product Without Product ID (Should Fail)
POST {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
}

### 36. Try to Add Product with Invalid Product ID (Should Fail)
POST {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productId": "invalid"
}

### 37. Try to Add Product with Negative ID (Should Fail)
POST {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productId": -1
}

### 38. Try to Add Product with Zero ID (Should Fail)
POST {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productId": 0
}

### 39. Try to Add Non-existent Product (Should Fail)
POST {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productId": 99999
}

### 40. Try Bulk Add with Empty Array (Should Fail)
POST {{baseUrl}}/api/user/wishlist/bulk
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productIds": []
}

### 41. Try Bulk Add with Too Many Products (Should Fail if >50)
POST {{baseUrl}}/api/user/wishlist/bulk
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productIds": [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51]
}

### 42. Try Bulk Add with Invalid Product IDs (Should Fail)
POST {{baseUrl}}/api/user/wishlist/bulk
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productIds": ["invalid", -1, 0, null]
}

### ==============================================
### PAGINATION EDGE CASES
### ==============================================

### 43. Get Wishlist with Invalid Page Number (Should Default to 1)
GET {{baseUrl}}/api/user/wishlist?page=0
Authorization: Bearer {{token}}

### 44. Get Wishlist with Large Page Number (Should Return Empty)
GET {{baseUrl}}/api/user/wishlist?page=999
Authorization: Bearer {{token}}

### 45. Get Wishlist with Invalid Limit (Should Default to 10)
GET {{baseUrl}}/api/user/wishlist?limit=0
Authorization: Bearer {{token}}

### 46. Get Wishlist with Very Large Limit (Should Cap at 100)
GET {{baseUrl}}/api/user/wishlist?limit=1000
Authorization: Bearer {{token}}

### ==============================================
### STRING VALIDATION TESTS
### ==============================================

### 47. Try to Add Product with String ID (Should Handle Conversion)
POST {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}
Content-Type: {{contentType}}

{
  "productId": "15"
}

### 48. Check Product Added with String ID
GET {{baseUrl}}/api/user/wishlist/check/15
Authorization: Bearer {{token}}

### ==============================================
### CLEAR OPERATIONS
### ==============================================

### 49. Get Current Wishlist Before Clear
GET {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}

### 50. Get Current Count Before Clear
GET {{baseUrl}}/api/user/wishlist/count
Authorization: Bearer {{token}}

### 51. Clear Entire Wishlist
DELETE {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}

### 52. Verify Wishlist is Empty After Clear
GET {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}

### 53. Verify Count is Zero After Clear
GET {{baseUrl}}/api/user/wishlist/count
Authorization: Bearer {{token}}

### 54. Verify Summary is Empty After Clear
GET {{baseUrl}}/api/user/wishlist/summary
Authorization: Bearer {{token}}

### 55. Try to Clear Already Empty Wishlist (Should Succeed)
DELETE {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}

### ==============================================
### MULTI-USER TESTING
### ==============================================

### 56. Login as Different User
POST {{baseUrl}}/api/user/login
Content-Type: {{contentType}}

{
  "email": "user2@example.com",
  "password": "password123"
}

### Save token for second user
@token2 = SECOND_USER_JWT_TOKEN_HERE

### 57. Add Product to Second User's Wishlist
POST {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token2}}
Content-Type: {{contentType}}

{
  "productId": 1
}

### 58. Verify First User's Wishlist is Still Empty
GET {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}

### 59. Verify Second User's Wishlist Has the Product
GET {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token2}}

### 60. Verify User Isolation - Check First User Can't See Second User's Items
GET {{baseUrl}}/api/user/wishlist/count
Authorization: Bearer {{token}}

### ==============================================
### FINAL VERIFICATION
### ==============================================

### 61. Final State Check - First User
GET {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token}}

### 62. Final Count Check - First User
GET {{baseUrl}}/api/user/wishlist/count
Authorization: Bearer {{token}}

### 63. Final Summary Check - First User
GET {{baseUrl}}/api/user/wishlist/summary
Authorization: Bearer {{token}}

### 64. Final State Check - Second User
GET {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token2}}

### 65. Final Count Check - Second User
GET {{baseUrl}}/api/user/wishlist/count
Authorization: Bearer {{token2}}

### ==============================================
### CLEANUP
### ==============================================

### 66. Clean Up - Clear Second User's Wishlist
DELETE {{baseUrl}}/api/user/wishlist
Authorization: Bearer {{token2}}

### 67. Verify Both Users Have Empty Wishlists
GET {{baseUrl}}/api/user/wishlist/count
Authorization: Bearer {{token}}

###
GET {{baseUrl}}/api/user/wishlist/count
Authorization: Bearer {{token2}}



