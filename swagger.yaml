# =========================================================================
# ===               UPDATED OPENAPI 3.0 SPECIFICATION                 ===
# =========================================================================

openapi: 3.0.3

info:
  title: Example E-commerce API
  version: 1.2.0
  description: |
    REST API for user authentication, cart management, orders, and products.
    
    ## Authentication
    Supported methods  
      • **JWT Bearer Token** – traditional login  
      • **Google OAuth 2.0** – social login
    
    ## Base URLs
      • **Production:** https://valyris-i.onrender.com/api  
      • **Development:** http://localhost:4000/api

servers:
  - url: https://valyris-i.onrender.com/api
    description: Production server
  - url: http://localhost:4000/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT obtained from login endpoints

    sessionAuth:
      type: apiKey
      in: cookie
      name: connect.sid
      description: Session cookie set after OAuth login

    googleOAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl:         https://oauth2.googleapis.com/token
          scopes:
            openid:  OpenID Connect
            profile: Profile information
            email:   Email address

  schemas:
    # ───── Request Objects ─────
    RegisterRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          minLength: 8
          example: securePassword123

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          example: securePassword123

    # ... (Other existing request schemas are unchanged) ...

    VerifyEmailBody:
      type: object
      required: [token]
      properties:
        token:
          type: string
          example: abcdef123456

    PhoneBody:
      type: object
      required: [phoneNumber]
      properties:
        phoneNumber:
          type: string
          example: "+911234567890"

    VerifyOTPBody:
      allOf:
        - $ref: '#/components/schemas/PhoneBody'
        - type: object
          required: [otp]
          properties:
            otp:
              type: string
              example: "123456"

    # === REFACTORED: New schemas for the updated Cart API ===
    AddItemRequest:
      type: object
      required: [productId, size]
      properties:
        productId:
          type: integer
          description: The ID of the product to add.
          example: 101
        size:
          type: string
          description: The selected size for the product.
          example: "M"
        quantity:
          type: integer
          description: The number of items to add. Defaults to 1 if not provided.
          example: 2

    UpdateItemRequest:
      type: object
      required: [quantity]
      properties:
        quantity:
          type: integer
          minimum: 0
          description: The new quantity for the cart item. A value of 0 will remove the item.
          example: 3
    # ========================================================
    
    # ... (Other existing schemas like Address, PlaceOrderRequest are unchanged) ...
    Address:
      type: object
      required: [street, city, country]
      properties:
        street:   { type: string, example: 123 Main Street }
        city:     { type: string, example: New York }
        country:  { type: string, example: USA }
        zipCode:  { type: string, example: "10001" }
        state:    { type: string, example: NY }

    # ... (The rest of your schemas are fine) ...

    # ───── Response Objects ─────
    User:
      type: object
      properties:
        id:        { type: integer, example: 1 }
        name:      { type: string,  example: John Doe }
        email:     { type: string,  example: john.doe@example.com }
        role:
          type: string
          enum: [USER, ADMIN, MODERATOR]
          example: USER
        createdAt: { type: string, format: date-time }

    # ... (Product, OrderItem, Order, AuthResponse schemas are unchanged) ...

    # === NEW: Schemas to describe the Cart API responses ===
    CartResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/CartItem'
            summary:
              $ref: '#/components/schemas/CartSummary'

    CartItem:
      type: object
      properties:
        id: { type: integer, example: 54 }
        userId: { type: integer, example: 12 }
        productId: { type: integer, example: 101 }
        size: { type: string, example: "M" }
        quantity: { type: integer, example: 2 }
        price:
          type: number
          format: float
          description: "The price of the product at the time it was added to the cart."
          example: 49.99
        product:
          type: object
          properties:
            name: { type: string, example: "Classic Cotton T-Shirt" }
            image: { type: string, example: "https://example.com/image.jpg" }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    CartSummary:
      type: object
      properties:
        totalItems:
          type: integer
          description: The total count of all items in the cart.
          example: 5
        subtotal:
          type: number
          format: float
          description: The calculated subtotal for all items in the cart.
          example: 149.95
    # ========================================================

    ErrorResponse:
      type: object
      properties:
        success: { type: boolean, example: false }
        message: { type: string,  example: Invalid credentials }
        error:   { type: string,  example: INVALID_CREDENTIALS }

# =========================================================================
# ===                   API ENDPOINT DEFINITIONS                      ===
# =========================================================================
paths:
  # ... (All your existing /user, /auth, /admin, and /order paths remain unchanged) ...

  # ───────── Cart ─────────
  # REFACTORED: The entire cart section is replaced with a new RESTful structure.
  
  /cart:
    get:
      tags: [Cart]
      summary: Get the current user's shopping cart
      description: Retrieves all items in the authenticated user's cart, along with a calculated summary.
      security:
        - bearerAuth: []
        - sessionAuth: []
      responses:
        "200":
          description: Successfully retrieved the user's cart.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart/items:
    post:
      tags: [Cart]
      summary: Add an item to the cart
      description: Adds a product to the cart. If the item (with the same product ID and size) already exists, its quantity is incremented. Otherwise, a new cart item is created.
      security:
        - bearerAuth: []
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddItemRequest'
      responses:
        "201":
          description: Item successfully added or updated in the cart.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: "Item added to cart." }
                  data:
                    $ref: '#/components/schemas/CartItem'
        "400":
          description: Bad Request (e.g., invalid input, insufficient stock).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found (e.g., product does not exist).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart/items/{cartItemId}:
    put:
      tags: [Cart]
      summary: Update a cart item's quantity
      description: Updates the quantity of a specific item in the cart. Setting the quantity to 0 will remove the item from the cart.
      security:
        - bearerAuth: []
        - sessionAuth: []
      parameters:
        - name: cartItemId
          in: path
          description: The unique ID of the cart item to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemRequest'
      responses:
        "200":
          description: Cart item successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: "Cart item updated." }
                  data:
                    $ref: '#/components/schemas/CartItem'
        "404":
          description: Not Found (e.g., cart item does not exist).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Cart]
      summary: Remove an item from the cart
      description: Permanently removes a specific item from the authenticated user's cart.
      security:
        - bearerAuth: []
        - sessionAuth: []
      parameters:
        - name: cartItemId
          in: path
          description: The unique ID of the cart item to remove.
          schema:
            type: integer
      responses:
        "200":
          description: Item successfully removed from the cart.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  message: { type: string, example: "Item removed from cart." }
        "404":
          description: Not Found (e.g., cart item does not exist).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  # ... (The rest of your /order and /product paths remain unchanged) ...

# =========================================================================
# ===                          API TAGS                               ===
# =========================================================================
tags:
  - name: Authentication
    description: User registration, login, e-mail verification, password reset
  - name: OTP
    description: Phone number OTP login
  - name: OAuth
    description: Google OAuth 2.0 authentication
  - name: Cart
    description: Shopping cart management
  - name: Orders
    description: Order management
  - name: Products
    description: Product catalogue maintenance
  - name: Admin
    description: Administrative endpoints
